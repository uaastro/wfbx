#!/usr/bin/python3
import socket
import atexit
import signal
import sys
import struct
import click
import sys
import time


@click.command()
@click.option('--mpkts', default=2048, help='udp max pkt size')
@click.option('--ip_tx', default='127.0.0.1', help='ip of destination host')
@click.option('--port_tx', default=5700, help='port of destination host')
@click.option('--ip_rx', default='0.0.0.0', help='ip of source host')
@click.option('--port_rx', default=5600, help='port of source host')
@click.option('--port_wfbs', default=14650, help='wfb_server port')
@click.option('--ip_wfbs', default='127.0.0.1', help='wfb_server_ip')
@click.option('--mode', default=0, help='mode 0 aggregator (default) mode 1 forwarder')
@click.option('--alrt_max', default=10, help='max number of alert pkt')

def main(mpkts,ip_tx,port_tx,ip_rx,port_rx,port_wfbs,ip_wfbs, mode, alrt_max):

    sock_rx = None
    sock_tx = None
    
    def cleanup():
        for s in (sock_rx, sock_tx):
            try:
                if s is not None:
                    s.close()
            except Exception as e:
                print(e)
                
    def signal_handler(sig, frame):
        cleanup()
        sys.exit(0)
        
    atexit.register(cleanup)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


    UDP_MAX_PKT_SIZE = mpkts
    UDP_IP_TX= ip_tx
    UDP_PORT_TX = port_tx
    UDP_IP_RX = ip_rx
    UDP_PORT_RX = port_rx


    link_id = 1
    pkt_num = 0
    rs_alrt = 0
    rs_alrt_max = alrt_max
    pkt_lost=0
    pkts = 0
    time_stamp=time.time()

    sock_rx= socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        sock_rx.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        if hasattr(socket, 'SO_REUSEPORT'):
            sock_rx.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
    except Exception:
        pass
    sock_rx.bind((UDP_IP_RX,UDP_PORT_RX))

    sock_tx=socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        sock_tx.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        if hasattr(socket, 'SO_REUSEPORT'):
            sock_tx.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
    except Exception:
        pass

    print("udp_proxy_rx started...")
    print(f"rx: {UDP_IP_RX} : {UDP_PORT_RX}")
    print(f"tx: {UDP_IP_TX} : {UDP_PORT_TX}")

    while True:
        packet, addr = sock_rx.recvfrom(UDP_MAX_PKT_SIZE) 
        PACKET_SIZE = len(packet)
        link_id, packet_number, data= struct.unpack("!II"+str((PACKET_SIZE - 4 - 4))+"s", packet)
        if packet_number > pkt_num:
            if mode == 0:
                sock_tx.sendto(data,(UDP_IP_TX, UDP_PORT_TX))
            elif mode == 1:
                sock_tx.sendto(packet,(UDP_IP_TX, UDP_PORT_TX))
            #stat data:
            pkt_lost+=packet_number-pkt_num-1
            pkts+=1
            #---------------------------------
            pkt_num=packet_number
            rs_alrt=0
        else:
            rs_alrt +=1
            if rs_alrt >= rs_alrt_max:
                pkt_num=packet_number
                rs_alrt = 0

        if (time.time() - time_stamp) >= 1:
            qlt = int((pkts*100)/(pkts+pkt_lost))
            stat_inf = f'udp_proxy_rx PKT {pkt_num}:{pkts}:{pkt_lost}:{qlt}'
            sock_tx.sendto(stat_inf.encode("utf-8"),(ip_wfbs, port_wfbs))
            time_stamp = time.time()
            pkt_lost = 0
            pkts = 0

if __name__ == '__main__':
    main()
