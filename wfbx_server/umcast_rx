#!/usr/bin/python3

import atexit
import select
import signal
import socket
import struct
import sys
import time
from typing import Optional

import click


def join_multicast_group(group_ip: str, port: int, iface_ip: Optional[str]) -> socket.socket:
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    try:
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
    except (AttributeError, OSError):
        pass
    sock.bind(("", port))

    group_bin = socket.inet_aton(group_ip)
    interfaces = []
    if iface_ip:
        interfaces.append(iface_ip)
    else:
        interfaces.append("0.0.0.0")  # INADDR_ANY
        interfaces.append("127.0.0.1")  # ensure loopback reception when stats originate locally

    for if_ip in interfaces:
        iface_bin = socket.inet_aton(if_ip)
        mreq = group_bin + iface_bin
        try:
            sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
        except OSError as exc:
            # If joining with INADDR_ANY fails but a specific interface succeeds, that's fine.
            if iface_ip:
                raise
            else:
                continue
    sock.setblocking(False)
    return sock


@click.command()
@click.option("--ip", "group_ip", default="239.255.0.1", show_default=True, help="Multicast group IP")
@click.option("--port", default=9100, type=int, show_default=True, help="Multicast UDP port")
@click.option("--iface", default=None, help="Local interface IP to join from (default: INADDR_ANY)")
@click.option("--interval", default=1, type=float, show_default=True, help="Print stats every N seconds")
def main(group_ip: str, port: int, iface: Optional[str], interval: float) -> None:
    if interval <= 0:
        interval = 1

    sock: Optional[socket.socket] = None

    def cleanup() -> None:
        if sock is not None:
            try:
                sock.close()
            except Exception:
                pass

    def handle_signal(_sig, _frame) -> None:
        cleanup()
        sys.exit(0)

    atexit.register(cleanup)
    signal.signal(signal.SIGINT, handle_signal)
    signal.signal(signal.SIGTERM, handle_signal)

    try:
        sock = join_multicast_group(group_ip, port, iface)
    except OSError as exc:
        click.echo(f"failed to join multicast group {group_ip}:{port} â€” {exc}", err=True)
        sys.exit(1)

    click.echo(f"listening on {group_ip}:{port} (iface={iface or 'any'})")

    total_packets = 0
    total_bytes = 0
    min_len = None
    max_len = 0

    window_packets = 0
    window_bytes = 0

    start_time = time.time()
    last_print = start_time

    while True:
        timeout = max(0.0, last_print + interval - time.time())
        ready, _, _ = select.select([sock], [], [], timeout)
        now = time.time()

        if ready:
            try:
                datagram, addr = sock.recvfrom(65535)
            except BlockingIOError:
                datagram = b""
            except OSError as exc:
                click.echo(f"recvfrom error: {exc}", err=True)
                datagram = b""
            if datagram:
                length = len(datagram)
                total_packets += 1
                total_bytes += length
                window_packets += 1
                window_bytes += length
                max_len = max(max_len, length)
                min_len = length if min_len is None else min(min_len, length)
        if now - last_print >= interval:
            elapsed_window = max(now - last_print, 1e-9)
            avg_len = (total_bytes / total_packets) if total_packets else 0.0
            window_rate = window_packets / elapsed_window
            window_avg = (window_bytes / window_packets) if window_packets else 0.0
            click.echo(
                f"total_pkts={total_packets} total_bytes={total_bytes} "
                f"min={min_len or 0} max={max_len} avg={avg_len:.1f} "
                f"window_pkts={window_packets} window_rate={window_rate:.1f}pps window_avg={window_avg:.1f}"
            )
            last_print = now
            window_packets = 0
            window_bytes = 0


if __name__ == "__main__":
    main()
